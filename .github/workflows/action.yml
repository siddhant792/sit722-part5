name: CI/CD Pipeline with Terraform

on:
  push:
    branches:
      - main 

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Terraform Init
      working-directory: ./scripts/terraform
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Terraform Plan
      id: tf_plan 
      working-directory: ./scripts/terraform
      run: terraform plan -out=plan.out
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Check if Plan Contains Changes
      id: tf_changes
      run: |
        if terraform show -json plan.out | jq .resource_changes | grep -q 'null'; then
          echo "No changes detected"
          echo "no_changes=true" >> $GITHUB_ENV
        else
          echo "Changes detected"
          echo "no_changes=false" >> $GITHUB_ENV
        fi
      working-directory: ./scripts/terraform

    - name: Apply Terraform
      if: env.no_changes == 'false' 
      working-directory: ./scripts/terraform
      run: terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  build:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Make build-image.sh executable
      run: chmod +x ./scripts/build-image.sh

    - name: Build Docker images
      run: ./scripts/build-image.sh
    
    - name: Make push-image.sh executable
      run: chmod +x ./scripts/push-image.sh

    - name: Push Docker images
      env:
        ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
        ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      run: ./scripts/push-image.sh

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Make deploy.sh executable
      run: chmod +x ./scripts/deploy.sh

    - name: Deploy to Kubernetes
      run: ./scripts/deploy.sh
      env:
        AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  delete:
    if: github.event_name == 'delete'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Make delete.sh executable
      run: chmod +x ./scripts/delete.sh

    - name: Delete Kubernetes resources
      run: ./scripts/delete.sh
